import {expect} from "chai";
import {ContainerOutput, ContainerState} from "../../common/types/ContainerTypes";

// class ContainerMock implements IDockerContainer {
//     public id: string;
//     public shortId: string;
//
// }

// The most important requirement is that the GradeTask should ALWAYS produce a valid IContainerOutput record.
describe("GradeTask", function() {
    const sampleOutput: ContainerOutput = {
        timestamp:          Date.now(),
        report:             {
            scoreOverall: 0,
            scoreCover:   null,
            scoreTest:    null,
            feedback:     'Internal error: The grading service failed to handle the request.',
            passNames:    [],
            skipNames:    [],
            failNames:    [],
            errorNames:   [],
            custom:       {},
            result:       "SUCCESS",
            attachments:  [],
        },
        postbackOnComplete: false,
        custom:             {},
        state:              ContainerState.SUCCESS,
        graderTaskId:        ""
    };

    function isValid(output: ContainerOutput) {
        return expect(output).to.be.an("object").that.has.all.keys(sampleOutput);
    }

    before(function() {
        // construct mocks
    });

    it("Should execute a valid task.");
    it("Should handle a container that times out.");
    it("Should handle a container that doesn't produce a grade record.");
    it("Should handle a container that doesn't produce log output.");
    it("Should remove the container after it has exited successfully.");
    it("Should remove the container after it has failed.");
    it("Should ignore errors when removing a container.");
    it("Should ignore errors when removing repo.");
    it("Should verify the report generated by the container.");
});
